{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNYrHIKMim+RfoGmHd+KAlc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anamasaenzb/Business-Analytics/blob/main/Reto2ArbolesDeDecision_AnaMar%C3%ADaS%C3%A1enzBotero.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**RETO 2: ÁRBOLES DE DECISIÓN**\n",
        "\n",
        "Por: Ana María Sáenz Botero.\n"
      ],
      "metadata": {
        "id": "CaDhk3l7ZUEC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "0. Se cargan las librerías de trabajo requeridas."
      ],
      "metadata": {
        "id": "W-CtlpbSbjCp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Se procede a traer el modelo. Este es un prestamo interbibliotecario de nuestro modelo de árbol.\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "#Ahora, hacemos otro prestamo interbibliotecario para llamar los archivos del Drive sin tener que subirlos.\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pnrsU2VObrDI",
        "outputId": "d18d2794-7f02-4a38-9e60-910490ce3b5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Cargamos los datos necesarios desde el Drive."
      ],
      "metadata": {
        "id": "t4cNCnq8bwIM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nxl='/content/drive/MyDrive/Analítica de Negocios/Retos/2. BD2_In_App_Pur_Int.xlsx'\n",
        "XDB=pd.read_excel(nxl,sheet_name=0)\n",
        "XDB=XDB.dropna()                        #Para evitar celdas vacías\n",
        "XDB.head()                              #Para mostrar el archivo\n",
        "\n",
        "#Seleccionamos las variables de nuestro interés.\n",
        "\n",
        "XD=XDB[['Age','Income','Years','Hours']]   #Son las variables que se tienen en cuenta.\n",
        "XD.head()\n",
        "XD=np.array(XD)                            #Con esto convierto la tabla en números, que son las variables de entrada para el modelo.\n",
        "yd=XDB[['Buy']]; yd=np.array(yd)           #La variable de referencia, es decir, lo que quiero que aprenda el modelo. En este caso, ¿qué jugadores es probable que hagan compras dentro de la aplicación?\n",
        "\n",
        "#Para sumar la cantidad de datos pertenecientes a cada categoria:\n",
        "np.sum(yd)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M1e5Sx_LciWm",
        "outputId": "d3fd1276-a9da-48cd-cf6e-9c8d0ccb139a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "211"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Implementamos y construimos nuestro modelo de árbol para realizar el análisis indicado sobre los jugadores y la probabilidad de compra en la aplicación."
      ],
      "metadata": {
        "id": "loGRaR7jeR6R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mar=DecisionTreeClassifier(criterion='gini',max_depth=4)\n",
        "mar.fit(XD,yd)\n",
        "ydp=mar.predict(XD)                     #Estos valores de pronóstico sirven para evaluar el modelo.\n",
        "\n",
        "#Ahora evaluamos el modelo.\n",
        "from sklearn.metrics import confusion_matrix\n",
        "cm=confusion_matrix(yd,ydp)\n",
        "VN=cm[0,0]; FP=cm[0,1]; FN=cm[1,0]; VP=cm[1,1]\n",
        "\n",
        "Ex=(VN+VP)/(VP+VN+FP+FN)                 #Que da 0,8475\n",
        "Se=VP/(VP+FN)                            #Que da 0,947867\n",
        "Es=VN/(VN+FP)                            #Que da 0,7354497\n",
        "\n",
        "print('Exactitud: ',Ex)\n",
        "print('Sensibilidad: ',Se)\n",
        "print('Especificidad: ',Es)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2JWqgZ47eW0H",
        "outputId": "669ceaee-6db7-4afd-b4f8-450a764acadb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Exactitud:  0.8475\n",
            "Sensibilidad:  0.9478672985781991\n",
            "Especificidad:  0.7354497354497355\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Se procede con la visualización de nuestro árbol de decisión."
      ],
      "metadata": {
        "id": "j6g39NoMeugb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Hacemos otro prestamo interbibliotecario.\n",
        "from sklearn.tree import export_graphviz         #Esta sirve para la estructura del árbol.\n",
        "from pydotplus import graph_from_dot_data        #Esta es una forma de poner el árbol más estético. Y se dice que datos le voy a colocar al árbol.\n",
        "\n",
        "vs=['Age','Income','Years','Hours']              #Estos nombres aparecen en el árbol.\n",
        "\n",
        "#Este código se le pide que al gráfico \"mar\" se le coloquen los nombres puestos en \"vs\".\n",
        "dot_data=export_graphviz(mar,feature_names=vs)   #Es asegurar los nombres del gráfico.\n",
        "graph=graph_from_dot_data(dot_data)              #Se hace el gráfico del árbol.\n",
        "graph.write_png('reto2arbol.png')                #Se crea la imagen."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E2Q_MgSoevfO",
        "outputId": "76cada44-0364-4ded-f568-42acc1cce8d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Pasamos a calcular los valores de la posibilidad de compra (1) para los casos de \"In_App_Pur_Socre\". Generalmente, estos son los que no tienen ninguna información guardada sobre la compra, registros previos."
      ],
      "metadata": {
        "id": "iFMWkfWOfHLQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "XDB2=pd.read_excel(nxl,sheet_name=1)\n",
        "XDB2=XDB2[['Age','Income','Years','Hours']]\n",
        "XDB2=XDB2.dropna()                       #Para evitar celdas vacías.\n",
        "\n",
        "#Se convierte en un array.\n",
        "XD2=np.array(XDB2)\n",
        "ydp2=mar.predict(XDB2)\n",
        "XDB2['Buy']=ydp2                         #Le pego la columna a la base de datos.\n",
        "XDB2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "Ti62iMKYfONQ",
        "outputId": "29ffa082-913c-4d42-9fca-5f44325f4af9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:458: UserWarning: X has feature names, but DecisionTreeClassifier was fitted without feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  Income  Years  Hours  Buy\n",
              "0   21     128      3     22    1\n",
              "1   50     128      1      6    0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-40da8a49-ba04-4e5b-bc1d-0787c8b7afd9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Income</th>\n",
              "      <th>Years</th>\n",
              "      <th>Hours</th>\n",
              "      <th>Buy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21</td>\n",
              "      <td>128</td>\n",
              "      <td>3</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50</td>\n",
              "      <td>128</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40da8a49-ba04-4e5b-bc1d-0787c8b7afd9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-40da8a49-ba04-4e5b-bc1d-0787c8b7afd9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-40da8a49-ba04-4e5b-bc1d-0787c8b7afd9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c8885883-67f8-4957-aa44-af111105ef37\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8885883-67f8-4957-aa44-af111105ef37')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c8885883-67f8-4957-aa44-af111105ef37 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "XDB2",
              "summary": "{\n  \"name\": \"XDB2\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 21,\n        \"max\": 50,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          50,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Income\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 128,\n        \"max\": 128,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          128\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Years\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hours\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 6,\n        \"max\": 22,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Buy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Ahora realizamos un paso para mandar estos resultados como un informe de Excel."
      ],
      "metadata": {
        "id": "sK5B4n2ufgu3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "XDB2.to_excel('NuevosCasos.xlsx')\n",
        "\n",
        "#Para contar cuántos tienen posibilidad de compra y cuales no por el modelo se busca sumar los 1 que hay y los 0 que hay. El resultado es:\n",
        "\n",
        "SiComp=np.sum(ydp2)\n",
        "NoComp=len(ydp2)-np.sum(ydp2)\n",
        "\n",
        "print('Posibles compradores: ',SiComp)\n",
        "print('No compradores: ',NoComp)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gkLS4xGdfliU",
        "outputId": "4f8f69aa-7551-49a4-a331-3a4491869174"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Posibles compradores:  1\n",
            "No compradores:  1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ANÁLISIS DE RESULTADOS OBTENIDOS:**\n",
        "\n",
        "En este caso, la base de datos permitió observar un total de 400 datos de posibles compradores, donde 211 (52,75%) son jugadores probables para comprar y 189 (47,25%) que no es probable que compren. Las variables usadas a tener en cuenta fueron:\n",
        "\n",
        "* El nodo raíz, que es Income y representa los ingresos de los jugadores de la app.\n",
        "* Age, un nodo inferior.\n",
        "* Years, otro nodo inferior.\n",
        "* Hours, otro nodo inferior.\n",
        "\n",
        "Ahora, la variable referencia fue \"Buy\", que es lo que nos permite reconocer si un cliente es probable que haga compras en la aplicación o no.\n",
        "\n",
        "De acuerdo con el proceso realizado, el modelo de árbol de decisión arrojó un índice de exactitud de 84,75%, así como índices de sensibilidad (comportamiento del modelo frente a la clasificación de posibles compradores) de 94,8% aproximadamente y especificidad (comportamiento del modelo frente a la clasificación de posibles no compradores) de 73,54% aproximadamente.\n",
        "\n",
        "Al tener esa exactitud tan alta (84,75%) a comparación de lo que es consideradonormal para ser considerado un buen modelo, se puede entener que el modelo realizado con los árboles de decisión es aceptable y viable para el pronóstico de los datos.\n",
        "\n",
        "Por otro lado, cuando nos referimos a los casos nuevos que son tan solo 2 posibles compradores, se puede observar que:\n",
        "\n",
        "*   Para el primer jugador, se encontró que es probable que este si realice compras en la aplicación con un porcentaje de 67% contra 33% aproximadamente. El camino para este resultado es:\n",
        "\n",
        "  Desde el primer cuadro pasa a la derecha por su income de 128 que es mayor a 63.5; ahora, al tener un valor de 3 en años pasaría a la derecha nuevamente porque es mayor a 1.5; pasa hacia el lado izquierdo ya que si cumople con ser menor a 5.5 años; y pasa finalmente ea la derecha porque su income es mayor que 76.5.\n",
        "\n",
        "  La regla es: Income>63.5 and Year>1.5 and Year<=5.5 and Income>76.5\n",
        "\n",
        "*   Para el segundo jugador, se encontró que es más probable que este no realice compras en la aplicación con un porcentaje de 100% contra 0%, pues se encuentra en un nodo puro. El camino es:\n",
        "\n",
        "  Desde el primer cuadro pasa a la derecha porque su income es de 128 que es mayor a 63.5; luego, al tener un valor en años de 1 pasa a la izquierda pues cumple con ser menor a 1.5; finalmente pasa a la derecha ya que la edad no es menor que 23, es 50.\n",
        "\n",
        "  La regal es: Income >63.5 and Years <=1.5 and Age >23\n",
        "\n",
        "Finalmente, refiriendonos a los nodos puros, que son cuando hay una probabilidad del 100% sea para un lado o para el otro, este modelo de árbol de decisión presenta 3:\n",
        "\n",
        "*   Cuando el primer Income <=63.5, pasando al lado izquierdo en \"true\" y quedandose en nodo puro inmediatamente.\n",
        "*   Cuando pasa el caso del segundo jugador que es Income >63.5 and Years <=1.5 and Age >23.\n",
        "*   Cuando Income >63.5 and Years <=1.5 and Ages <=23 and Years >0.5"
      ],
      "metadata": {
        "id": "9pkQzsoPgNcU"
      }
    }
  ]
}
