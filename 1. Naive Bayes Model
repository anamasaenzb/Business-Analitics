{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPgpCO54RxXALn5r5xqWtcF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anamasaenzb/Business-Analytics/blob/main/Reto1NaiveBayes_AnaMariaSaenz.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**RETO #1 - MODELO NAIVE BAYES HECHO POR ANA MARÍA SÁENZ BOTERO**"
      ],
      "metadata": {
        "id": "-qCXIBw0TyzC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "0. Cargamos las librerías de trabajo necesarias."
      ],
      "metadata": {
        "id": "2tMGInXbT_Gk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd                            #Conexión con archivos de Excel.\n",
        "import numpy as np                             #Funciones matemáticas.\n",
        "\n",
        "#Import es prestar solo en una biblioteca y from es para buscar en varias bibliotecas.\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB     #Modelo Gaussian Naive Bayes.\n",
        "from sklearn.metrics import confusion_matrix   #Siempre debo tener métricas para un modelo, esto es cómo lo voy a evaluar."
      ],
      "metadata": {
        "id": "eRuYrNdsUIp1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Se cargan los datos de la base a analizar. En este caso se encuentran en la carpeta \"content\" y \"sample data\"."
      ],
      "metadata": {
        "id": "Al2okMacUU8M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "nxl=\"/content/sample_data/1. BD2_CarCrash_Int.xlsx\"\n",
        "XDB=pd.read_excel(nxl, sheet_name=0)     #Para que traiga la base de datos que tienen todas las variables.\n",
        "XDB.dropna()                             #Que es para evitar celdas vacías que entorpezcan el procedimiento.\n",
        "\n",
        "#Procedemos a crear el Data Mart con las arivables que deseamos analizar.\n",
        "\n",
        "XD=XDB[['Weekday','ViolCat','Month','Daylight','ClearWeather']] #Estas son nuestras variables de entrada.\n",
        "yd=XDB[['Highway']]                                             #Esta es nuestra variable de salida."
      ],
      "metadata": {
        "id": "D39jdOUkUZpP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Se procede con la configuración y evaluación del modelo Naive Bayes, que nos va a servir para predecir si ocurren o no accidentes en una autopista."
      ],
      "metadata": {
        "id": "C74uFbuCUuOB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mnb=GaussianNB()            #Es el modelo que vamos a usar.\n",
        "mnb.fit(XD,yd)              #Ajustar el modelo a esas dos variables que se pusieron en el paréntesis: XD, que es la entrada, y yd, que es la salida (las variables y la determinante).\n",
        "\n",
        "#Analizamos los resultados arrojados por el modelo.\n",
        "\n",
        "#Medias:\n",
        "u=mnb.theta_                                #Estas son las medias de cada variable.\n",
        "print('Las medias de las variables son:\\n') #El slash y la n se refieren a que deje un espacio o renglón antes de mostrar los valores.\n",
        "print(u)\n",
        "\n",
        "#Varianzas:\n",
        "sigma0=mnb.var_                             #Estas son las varianzas de cada variable.\n",
        "print('\\nLas varianzas de las variables son:\\n')\n",
        "print(sigma0)\n",
        "\n",
        "#Ahora, para calcular la desviación de las variables se usa la fórmula:\n",
        "sigma=np.sqrt(mnb.var_)                     #Desviación de cada variable.\n",
        "print('\\nLas desviaciones de las variables son:\\n')\n",
        "print(sigma)\n",
        "\n",
        "#Se encuentran los límites, tanto inferior como superior donde oscilan las variables.\n",
        "LS=u+sigma                                   #Es el límite superior de donde oscilan los datos.\n",
        "print('\\nLos límites superiores para las edades son:\\n')\n",
        "print(LS)\n",
        "\n",
        "LI=u-sigma                                   #Es el límite inferior de donde oscilan los datos.\n",
        "print('\\nLos límites inferiores para las edades son:\\n')\n",
        "print(LI)\n",
        "\n",
        "\n",
        "#Se procede con la evaluación del comportamiento del modelo prediciendo si un accidente automovilístico se provocó en una autopista o no: ¿sirve o no?\n",
        "ydp=mnb.predict(XD) #Hizo el pronóstico de la accidentes para los lugares. Ya no es \"yd\", ahora es \"y sub d pronosticado\".\n",
        "\n",
        "\n",
        "#Ahora, usamos una matriz llamada confusion matrix que nos permite evaluar nuestro modelo en contexto.\n",
        "\n",
        "cm=confusion_matrix(yd,ydp) #Matriz de confusión, que nos dice cómo funcionó el modelo.\n",
        "print('\\nLa matriz de confusión es:\\n')\n",
        "print(cm)\n",
        "\n",
        "VN=cm[0,0];FP=cm[0,1];FN=cm[1,0];VP=cm[1,1]\n",
        "\n",
        "#Aquí, VN=4560 & FP=325 & FN=1563 & VP=257\n",
        "\n",
        "#Lo que nos dice la matriz sobre el modelo es que, en cuanto a la predicción de accidentes es que de 1.820 accidentes en autopista que si ocurrieron, el modelo fue capaz de predecir 257 y falló en 1.563. Por otro lado, en cuando a los accidentes en autopista que no ocurrieron, acertó en 4.560 y falló en 325 de un total de 4.885\n",
        "\n",
        "#Ahora, calculamos la exactitud que tuvo el modelo, es decir, en general que porcentage de la data clasifica correctamente el modelo. Dando un 71,84%.\n",
        "\n",
        "Ex=(VP+VN)/len(XD)\n",
        "print('\\nLa exactitud del modelo es:\\n')\n",
        "print(Ex)\n",
        "\n",
        "#Nota: Si el modelo esta por encima del 70% es considerado un buen modelo.\n",
        "\n",
        "#Otra metrica a conocer es la tasa de error, que complementa la exactitud y representa, en general, que porcentage de la data clasifica incorrectamente el modelo. En este caso es 28,15%.\n",
        "\n",
        "Ter=(FP+FN)/len(XD)\n",
        "print('\\nLa tasa de error del modelo es:\\n')\n",
        "print(Ter)\n",
        "\n",
        "#También tenemos métricas como: sensibilidad, especificidad, precisión y predicción negativa del modelo.\n",
        "\n",
        "Sen=VP/(VP+FN) #Sensibilidad del modelo, que significa: cuando la clase es positiva, que porcentage logra clasificar? 14,12%\n",
        "print('\\nLa sensibilidad del modelo es:\\n')\n",
        "print(Sen)\n",
        "\n",
        "Esp=VN/(VN+FP) #Especificidad del modelo, que significa: cuando la clase es negativa, que porcentage logra clasificar? 93,3%\n",
        "print('\\nLa especificidad del modelo es:\\n')\n",
        "print(Esp)\n",
        "\n",
        "Pres=VP/(VP+FP) #Precisión del modelo, que significa: cuando predice positvos, que porcentage clasifica correctamente? 44,15%\n",
        "print('\\nLa precisión del modelo es:\\n')\n",
        "print(Pres)\n",
        "\n",
        "PredNeg=VN/(VN+FN) #Predicción negativa del modelo, que significa: cuando predice negativo, que porcentage clasifica correctamente? 74,47%\n",
        "print('\\nLa predicción negativa del modelo es:\\n')\n",
        "print(PredNeg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yPfqX4xi4RuC",
        "outputId": "9c067ed5-18a3-4b74-a4f4-e8f45dbef318"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Las medias de las variables son:\n",
            "\n",
            "[[3.88945752 6.7778915  5.52548618 0.6814739  0.85261003]\n",
            " [3.82417582 4.31538462 5.47417582 0.70934066 0.79450549]]\n",
            "\n",
            "Las varianzas de las variables son:\n",
            "\n",
            "[[ 3.71838426 13.21146619 10.71772304  0.21706724  0.12566618]\n",
            " [ 3.34161334  5.60712596 10.64164082  0.2061765   0.16326653]]\n",
            "\n",
            "Las desviaciones de las variables son:\n",
            "\n",
            "[[1.92831125 3.63475806 3.27379337 0.46590475 0.35449426]\n",
            " [1.82800803 2.36793707 3.26215279 0.45406663 0.40406253]]\n",
            "\n",
            "Los límites superiores para las edades son:\n",
            "\n",
            "[[ 5.81776877 10.41264957  8.79927955  1.14737865  1.20710429]\n",
            " [ 5.65218385  6.68332168  8.73632861  1.16340729  1.19856802]]\n",
            "\n",
            "Los límites inferiores para las edades son:\n",
            "\n",
            "[[1.96114628 3.14313344 2.25169281 0.21556915 0.49811577]\n",
            " [1.9961678  1.94744755 2.21202304 0.25527403 0.39044297]]\n",
            "\n",
            "La matriz de confusión es:\n",
            "\n",
            "[[4560  325]\n",
            " [1563  257]]\n",
            "\n",
            "La exactitud del modelo es:\n",
            "\n",
            "0.7184190902311708\n",
            "\n",
            "La tasa de error del modelo es:\n",
            "\n",
            "0.2815809097688292\n",
            "\n",
            "La sensibilidad del modelo es:\n",
            "\n",
            "0.1412087912087912\n",
            "\n",
            "La especificidad del modelo es:\n",
            "\n",
            "0.9334698055271239\n",
            "\n",
            "La precisión del modelo es:\n",
            "\n",
            "0.4415807560137457\n",
            "\n",
            "La predicción negativa del modelo es:\n",
            "\n",
            "0.7447329740323371\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1183: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Ahora, evaluamos a un caso en específico, que como lo solicitado en el proyecto de San Diego, es:"
      ],
      "metadata": {
        "id": "nYEdXHTe6V_G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Para evaluar el caso espeficifo propuesto, usamos:\n",
        "\n",
        "XSC=[[7,1,3,0,1]]    #The order is different than the one presented in the instructions since the variables are in a different order in the first step.\n",
        "\n",
        "ydsc=mnb.predict(XSC)\n",
        "\n",
        "print(\"La predicción de que habrá un accidente en autopista en San Diego con estas características es:\\n\",ydsc)\n",
        "\n",
        "#Que nos da un resultado positivo, es decir, se predice que si habrá un accidente en la autopista."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-EONJBnt6cQN",
        "outputId": "50b544e1-86e9-48db-afd3-5a7204e028cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "La predicción de que habrá un accidente en autopista en San Diego con estas características es:\n",
            " [0]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but GaussianNB was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ANÁLISIS DE LOS RESULTADOS OBTENIDOS:**\n",
        "\n",
        "Información básica de la base de datos: Se tienen 6.705 datos y 12 variables, pero en este caso se tomaron 5 para evaluar la accidentalidad. Ahora, de todos los datos, los 0 (no ocurren accidentes en autopista) son 4.885 del total y los 1 (sí ocurren accidentes en autopista) son 1.820.\n",
        "\n",
        "\n",
        "En este caso, los resultados arrojados por el modelo en cuanto a la predicción de que sucedan accidentes en autopista para el condado de San Diego muestran una *exactitud* general para clasificar de *71,84%* aproximadamente, acompañada de una *tasa de error de 28,16%* aproximadamente, lo que significa que es un modelo considerado como bueno; sin embargo, al hacer una revisión más profunda, se encontraron ciertas fallas en la predicción de casos donde si suceden accidentes, que será evaluado más adelante.\n",
        "\n",
        "En cuanto a las métricas que peremiten una análisis más profundo, se encontró que la *sensibilidad* del modelo, que se refiere a que tan acertado es al clasificar cuando la clase es positiva (los accidentes si ocurren en autopista), es del *14,12%* , un resultado bastantee bajo que demuestra poca efectividad en este sentido. Sin embargo, en cuanto a la *especificidad* , que es que porcentaje logra clasificar cuando la clase es negativa (los accidentes no ocurren en autopista) se alcanzó un valor de *93,35%* aproximadamente, el cual es sumamente alto y demuestra una eficiencia útil.\n",
        "\n",
        "En resumen, el modelo funciona mejor para predecir los accidentes en San Diego que no ocurren en autopistas, siendo poco confiable en el caso contrario. Sin embargo, en términos generales, el modelo se considera bueno gracias al porcentaje de exactitud mayor a 70%, lo que se demuestra en el ejemplo donde se predice que *no ocurriría un accidente en autopista* para el caso de día de la semana 7, nivel de impacto de 1, cielo despejado de 1, mes 3, y luz de día 0."
      ],
      "metadata": {
        "id": "1-e_1IW1PZen"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Paso extra: Para hacer una estimación de las predicciones de si se daría o no un accidente en autopista nuevo para todas las variables.\n",
        "\n",
        "Link al informe: https://docs.google.com/spreadsheets/d/1xjkVgjGp7HMzfJ9yHptSDLiC_0ZN6k-S/edit?usp=sharing&ouid=117755195104922627991&rtpof=true&sd=true"
      ],
      "metadata": {
        "id": "lLRVaSFuSJc4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Estos sería para aquellos que no tienen ningun dato o proceso previo en general.\n",
        "\n",
        "XDBn=pd.read_excel(nxl, sheet_name=0)\n",
        "XDBn.head(100)\n",
        "\n",
        "#Procedemos a crear el Data Mart con las 5 variables que deseamos analizar.\n",
        "\n",
        "XDn=XDBn[['Weekday','ViolCat','Month','Daylight','ClearWeather']] #Variables de entrada.\n",
        "ydn=XDBn[['Highway']]                                             #Variable de salida, objetivo a analizar.\n",
        "\n",
        "#Se hace el pronóstico para todos los datos disponibles nuevos.\n",
        "\n",
        "ydpn=mnb.predict(XDn)\n",
        "\n",
        "#Se procede con la creación del informe.\n",
        "\n",
        "XDsal=np.column_stack((XDn,ydpn,ydn))        #Para mostrar columnas juntas.\n",
        "df_sal=pd.DataFrame(XDsal)                   #Se crea la tabla.\n",
        "df_sal.to_excel('InformeAccidentes.xlsx')    #Se crea/envía el archivo de Excel.\n",
        "df_sal.head(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "haYY7P0qStHY",
        "outputId": "b903864e-02f8-4d27-b59a-6ed75192a94d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    0   1  2  3  4  5  6\n",
              "0   7   8  1  1  0  0  0\n",
              "1   1   3  1  0  1  0  0\n",
              "2   2  12  1  0  1  0  0\n",
              "3   4  12  1  1  1  0  0\n",
              "4   3   9  1  0  1  0  0\n",
              ".. ..  .. .. .. .. .. ..\n",
              "95  6   8  3  1  1  0  0\n",
              "96  2   9  4  1  0  0  0\n",
              "97  2   9  4  0  1  0  0\n",
              "98  3  12  4  0  1  0  0\n",
              "99  4   9  4  1  1  0  0\n",
              "\n",
              "[100 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e372fd92-d016-4592-9c6c-cf7bb336fa36\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>3</td>\n",
              "      <td>12</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>4</td>\n",
              "      <td>9</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e372fd92-d016-4592-9c6c-cf7bb336fa36')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e372fd92-d016-4592-9c6c-cf7bb336fa36 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e372fd92-d016-4592-9c6c-cf7bb336fa36');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4659e837-1922-4698-874a-c764adb76f12\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4659e837-1922-4698-874a-c764adb76f12')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4659e837-1922-4698-874a-c764adb76f12 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_sal",
              "summary": "{\n  \"name\": \"df_sal\",\n  \"rows\": 6705,\n  \"fields\": [\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          7,\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          3,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 3,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 4,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 5,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 6,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    }
  ]
}
